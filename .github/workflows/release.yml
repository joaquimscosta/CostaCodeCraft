name: Release
on:
  push:
    tags:
      - 'v*'
    branches: ['refactor_workflows']
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: joaquimscosta/costacodecraft-ui
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and Lint
    uses: ./.github/workflows/development.yml

  docker:
    name: Build Container
    needs: [build]
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      DOCKER_IMAGE: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: "Docker metadata"
        id: meta
        uses: docker/metadata-action@v5
        with: 
          images: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}
      
      - name: Build and Export image
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          load: true
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{steps.meta.outcome.labels}}
          tags: |
            ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:latest
            ${{ steps.meta.outputs.tags }}

      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ steps.meta.outputs.tags }}
          fail-build: false
          severity-cutoff: high

      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Publish container image
        run: |
          docker push ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}:latest
          docker push ${{ steps.meta.outputs.tags }}
  deploy:
      name: Deploy
      needs: [docker]
      runs-on: ubuntu-latest
      permissions:
        contents: read
        pull-requests: write
      env:
        TF_CLOUD_ORGANIZATION: "joaquimcosta"
        TF_API_TOKEN: "${{secrets.TF_API_TOKEN}}"
        TF_WORKSPACE: "costacodecraft-ui"
        CONFIG_DIRECTORY: "./terraform"
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
        
        - name: Upload Configuration
          uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
          id: plan-upload
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}
            speculative: true

        - name: Create Plan Run
          uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
          id: plan-run
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
            plan_only: true
      
        - name: Get Plan Output
          uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
          id: plan-output
          with:
            plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
          
        # - name: Update PR
        #   uses: actions/github-script@v6
        #   id: plan-comment
        #   with:
        #     github-token: ${{ secrets.GITHUB_TOKEN }}
        #     script: |
        #       // 1. Retrieve existing bot comments for the PR
        #       const { data: comments } = await github.rest.issues.listComments({
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         issue_number: context.issue.number,
        #       });
        #       const botComment = comments.find(comment => {
        #         return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
        #       });
        #       const output = `#### HCP Terraform Plan Output
        #           \`\`\`
        #           Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
        #           \`\`\`
        #           [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
        #           `;
        #       // 3. Delete previous comment so PR timeline makes sense
        #       if (botComment) {
        #         github.rest.issues.deleteComment({
        #           owner: context.repo.owner,
        #           repo: context.repo.repo,
        #           comment_id: botComment.id,
        #         });
        #       }
        #       github.rest.issues.createComment({
        #         issue_number: context.issue.number,
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         body: output
        #       });

        - name: Upload Configuration
          uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
          id: apply-upload
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}

        - name: Create Apply Run
          uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
          id: apply-run
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

        - name: Apply
          uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
          if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
          id: apply
          with:
            run: ${{ steps.apply-run.outputs.run_id }}
            comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"