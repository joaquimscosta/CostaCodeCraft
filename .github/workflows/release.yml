name: Release
on:
  push:
    tags:
      - 'v*'
    branches: ['refactor_workflows']
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: joaquimscosta/costacodecraft-ui
  VERSION: 040319881
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and Lint
    uses: ./.github/workflows/development.yml

  docker:
    name: Build Container
    needs: [build]
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      TAG: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: "Docker metadata"
        id: meta
        uses: docker/metadata-action@v5
        with: 
          images: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}
      
      - name: "Print Testing"
        run: |
         echo "tags=${{steps.meta.outputs.tags}}"
         echo "labels=${{steps.meta.outputs.labels}}"


      - name: Build and Export image
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          load: true
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{steps.meta.outcome.labels}}
          tags: |
            latest
            ${{ steps.meta.outputs.tags }}

      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}:${{ steps.meta.outputs.tags }}
          fail-build: false
          severity-cutoff: high

      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Publish container image
        run: |
          docker push ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}:latest
          docker push ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}:${{ steps.meta.outputs.tags }}
  deploy:
    name: Deploy
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy App Service
        run: echo "Deploy container to App Service ${{needs.docker.outputs.TAG}}"